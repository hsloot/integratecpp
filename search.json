[{"path":[]},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement henrik.sloot@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://hsloot.github.io/integratecpp/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://hsloot.github.io/integratecpp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Henrik Sloot Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hsloot.github.io/integratecpp/articles/integratecpp-usage.html","id":"an-implementation-with-integratecpp","dir":"Articles","previous_headings":"","what":"An implementation with integratecpp","title":"Using `integratecpp`","text":"integratecpp requires C++11, use Rcpp plugin cpp11 link includes directory integratecpp using depends attribute integratecpp. Next, include STL header <cmath> using std::pow include header <integratecpp.h>. Finally, implement function using integratecpp interface Rdagi: Note, basic form, using integratecpp’s wrapper requires following two things: Callable object invocable type const double yields result convertible double. Roughly, object can used construct std::function<double(const double)>, e.g., suitable lambda expression. call integratecpp::integrate. Optionally, integration parameters can changed, exceptions can captured handled, integration error estimate can examined.","code":"// [[Rcpp::plugins(cpp11)]] // [[Rcpp::depends(integratecpp)]] #include <cmath> #include <integratecpp.h> // [[Rcpp::export]] double gamma_inc(const double alpha, const double x) {     // NOTE: integrand implemented as capturing lambda     const auto fn = [alpha](const double u) {         return std::exp(-u) * std::pow(u, alpha - 1.);     };      // NOTE: throws if integration error occurs     const auto result = integratecpp::integrate(         fn, x, std::numeric_limits<double>::infinity());      return result.value; } ## demo with sane input gamma_inc(-0.5, 1) #> [1] 0.1781477  ## demo with not so sane input tryCatch(gamma_inc(0, 0), error = function(cond) print(cond)) #> <integratecpp::bad_integrand_error in gamma_inc(0, 0): extremely bad integrand behaviour> tryCatch(gamma_inc(0, -1), error = function(cond) print(cond)) #> <integratecpp::integration_runtime_error in gamma_inc(0, -1): non-finite function value>"},{"path":"https://hsloot.github.io/integratecpp/articles/integratecpp-usage.html","id":"an-implementation-without-integratecpp","dir":"Articles","previous_headings":"","what":"An implementation without integratecpp","title":"Using `integratecpp`","text":"following example use integratecpp wrapper, hints wrapper works internally. First, need include header R’s C entry-points integration routines Rdqags Rdqagi: , require STL headers handling data: Also, need STL headers Rcpp header exception error handling: Finally, can implement upper incomplete Gamma function:","code":"#include <R_ext/Applic.h> #include <algorithm> // std::transform #include <utility>   // std::make_pair, std::pair #include <vector>    // std::vector #include <exception>  // std::exception_ptr, std::make_exception_ptr,                        // std::rethrow_exception, std::current_exception #include <stdexcept>  // std::exception, std::runtime_error #include <Rcpp.h>     // Rcpp::stop // [[Rcpp::export]] double gamma_inc_direct(const double alpha, const double x) {     // NOTE: integrand implemented as capturing lambda     const auto fn = [alpha](const double u) {         return std::exp(-u) * std::pow(u, alpha - 1.);     };      // create bounds parameters for `Rdqagi`     double bound = x;     int inf = 1.;      // initialize output variables for integration results     double result;     double abserr;     int last;     int neval;      // initialize configuration parameters     int limit = 100;     double epsrel = 0.0001220703125;     double epsabs = epsrel;     int lenw = 4 * limit;      // initialize working array     auto iwork = std::vector<int>(limit);     auto work = std::vector<double>(lenw);      // initialize variable for error code     int ier = 0;      // NOTE: `Rdqagi` requires a function pointer with signature     // `void(*)(double *, int, void *)` and a void pointer     // `void *` passed to the callback as the last argument     const auto fn_callback = [](double *x, int n, void *ex) {         // cast `void *` to original type and create references         // to the `Callable` and the exception pointer         using ex_t = std::pair<decltype(fn), std::exception_ptr>;         auto &fn_integrand = (*static_cast<ex_t *>(ex)).first;         auto &e_ptr = (*static_cast<ex_t *>(ex)).second;                  // evaluate `Callable` at *inout* pointer-to-arry `x`         // and catch possible exceptions in exception pointer         try {             std::transform(&x[0], &x[n], &x[0], fn_integrand);         } catch (const std::exception& e) {             e_ptr = std::current_exception();         }                  // store a runtime exception in the exception pointer          // if any results are infinite          if (!std::all_of(&x[0], &x[n],                           [](const double x) {                               return std::isfinite(x);                           })) {             e_ptr = std::make_exception_ptr(                 std::runtime_error(\"non-finite function value\"));           }     };      // create pair with `Callable` and exception pointer      // (`nullptr` on initialization) as external data for      // callback function     auto ex = std::make_pair(fn, std::exception_ptr());          // call `C`-method `Rdqagi`     Rdqagi(fn_callback, &ex, &bound, &inf, &epsabs, &epsrel, &result,            &abserr, &neval, &ier, &limit, &lenw, &last, iwork.data(),            work.data());          // rethrow possible exceptions during function evaluation     if (ex.second) std::rethrow_exception(ex.second);          // throw `Rcpp::exception` if integration error occured     if (ier > 0) Rcpp::stop(\"Integration error\");      return result; } ## demo with sane input gamma_inc_direct(-0.5, 1) #> [1] 0.1781477  ## demo with not so sane input tryCatch(gamma_inc_direct(0, 0), error = function(cond) print(cond)) #> <Rcpp::exception in gamma_inc_direct(0, 0): Integration error> tryCatch(gamma_inc_direct(0, -1), error = function(cond) print(cond)) #> <std::runtime_error in gamma_inc_direct(0, -1): non-finite function value>"},{"path":"https://hsloot.github.io/integratecpp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Henrik Sloot. Author, maintainer.","code":""},{"path":"https://hsloot.github.io/integratecpp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sloot H (2022). integratecpp: C++ API R integration routines. R package version 0.1.0, https://hsloot.github.io/integratecpp/.","code":"@Manual{,   title = {integratecpp: C++ API for R integration routines},   author = {Henrik Sloot},   year = {2022},   note = {R package version 0.1.0},   url = {https://hsloot.github.io/integratecpp/}, }"},{"path":"https://hsloot.github.io/integratecpp/index.html","id":"integratecpp","dir":"","previous_headings":"","what":"C++ API for R integration routines","title":"C++ API for R integration routines","text":"package integratecpp provides header-C++11 interface R’s C-API numerical integration.","code":""},{"path":"https://hsloot.github.io/integratecpp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"C++ API for R integration routines","text":"can install development version integratecpp like : include header C++ source files building Rcpp, use intend including header source files R-package, drop Rcpp attributes include following line DESCRIPTION file: Note header includes C++ standard library headers <R_ext/Applic.h>.","code":"remotes::install_github(\"hsloot/integratecpp\") // C++  // [[Rcpp::plugins(cpp11)]] // [[Rcpp::depends(integratecpp)]]  #include <integratecpp.h>  // your code LinkingTo: integratecpp"},{"path":"https://hsloot.github.io/integratecpp/index.html","id":"why-is-this-useful","dir":"","previous_headings":"","what":"Why is this useful?","title":"C++ API for R integration routines","text":"Many R package authors implement critical parts C, Fortran C++ improve performance. However, R provides API C possible mix C C++, using C-API C++ code can pose higher burden familiar R Rcpp C++ C. Consider following example, approximating integral identity function  interval : key part adhering interface Rdqags creating callback functor fn_callback, taking void * pointer original function, internally casted correct type used overwrite array double corresponding function evaluations. rather complicated requires familiarity pointers. Additionally, snippet missing translation error code proper error message. make worse, without guarding callback functions C++ exceptions, introduce possible undefined behavior. Using wrapper simplifies numerical integration Rcpp considerably:","code":"// C++  // [[Rcpp::plugins(cpp11)]] // [[Rcpp::depends(integratecpp)]]  #include <algorithm> // std::transform  #include <Rcpp.h> #include <R_ext/Applic.h>  // [[Rcpp::export(rng=false)]] Rcpp::List integrate_identity() {   // define integrand as lambda   auto fn = [](const double x) {     return x;   };    // define bounds   double lower = 0.;   double upper = 1.;    // initialize output variables for integration results   double result;   double abserr;   int last;   int neval;    // initialize configuration parameters   int limit = 100;   double epsrel = 0.0001220703125;   double epsabs = epsrel;   int lenw = 4 * limit;    // initialize working array   auto iwork = std::vector<int>(limit);   auto work = std::vector<double>(lenw);    // initialize variable for error code   int ier = 0;    // NOTE: `Rdqags` requires a function pointer with signature   // `void(*)(double *, int, void *)` and a void pointer   // `void *` passed to the callback as the last argument   const auto fn_callback = [](double *x, int n, void *ex) {     auto& fn_integrand = *static_cast<decltype(&fn)>(ex);     std::transform(&x[0], &x[n], &x[0], fn_integrand);     return;   };    // NOTE: finite bounds can be integrated with the `C`-method `Rdqags`   Rdqags(fn_callback, &fn, &lower, &upper, &epsabs, &epsrel, &result,          &abserr, &neval, &ier, &limit, &lenw, &last, iwork.data(),          work.data());    return Rcpp::List::create(       Rcpp::Named(\"value\") = result,       Rcpp::Named(\"absolute_error\") = abserr,       Rcpp::Named(\"subdivisions\") = last,       Rcpp::Named(\"neval\") = neval); } integrate_identity() #> $value #> [1] 0.5 #>  #> $absolute_error #> [1] 5.551115e-15 #>  #> $subdivisions #> [1] 1 #>  #> $neval #> [1] 21 // C++  // [[Rcpp::plugins(cpp11)]] // [[Rcpp::depends(integratecpp)]]  #include <stdexcept> #include <exception>  #include <Rcpp.h> #include <integratecpp.h>  // [[Rcpp::export(rng=false)]] Rcpp::List integrate_identity_improved() {   auto fn = [](const double x) {     return x;   };    try {     const auto result = integratecpp::integrate(fn, 0., 1.);     return Rcpp::List::create(         Rcpp::Named(\"value\") = result.value,         Rcpp::Named(\"absolute_error\") = result.absolute_error,         Rcpp::Named(\"subdivisions\") = result.subdivisions,         Rcpp::Named(\"neval\") = result.neval);   } catch (const std::exception& e) {     Rcpp::stop(e.what());   } }  // [[Rcpp::export(rng=false)]] Rcpp::List integrate_identity_error() {   auto fn = [](const double x) {     throw std::runtime_error(\"stop on purpose\");     return x;   };    try {     const auto result = integratecpp::integrate(fn, 0., 1.);     return Rcpp::List::create(         Rcpp::Named(\"value\") = result.value,         Rcpp::Named(\"absolute_error\") = result.absolute_error,         Rcpp::Named(\"subdivisions\") = result.subdivisions,         Rcpp::Named(\"neval\") = result.neval);   } catch (const std::exception& e) {     Rcpp::stop(e.what());   } } integrate_identity_improved() #> $value #> [1] 0.5 #>  #> $absolute_error #> [1] 5.551115e-15 #>  #> $subdivisions #> [1] 1 #>  #> $neval #> [1] 21 tryCatch(integrate_identity_error(), error = function(cond) print(cond)) #> <Rcpp::exception in integrate_identity_error(): stop on purpose>"},{"path":"https://hsloot.github.io/integratecpp/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"C++ API for R integration routines","text":"Please note integratecpp project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/Integrator-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A class for numerical integration — Integrator-class","title":"A class for numerical integration — Integrator-class","text":"class numerical integration","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/Integrator-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class for numerical integration — Integrator-class","text":"","code":"# S4 method for Integrator initialize(   .Object,   max_subdivisions = 100,   relative_accuracy = .Machine$double.eps^0.25,   absolute_accuracy = relative_accuracy,   work_size = 4 * max_subdivisions )  # S4 method for Integrator $(x, name)  # S4 method for Integrator $(x, name) <- value"},{"path":"https://hsloot.github.io/integratecpp/reference/Integrator-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"A class for numerical integration — Integrator-class","text":"initialize,Integrator-method: Construct object class Integrator. $,Integrator-method: Either access configuration parameters max_subdivisions, relative_accuracy, absolute_accuracy, work_size get integration routine signature function(f, lower, upper, ..., stop..error = TRUE). $<-,Integrator-method: Set configuration parameters max_subdivisions, relative_accuracy, absolute_accuracy, work_size.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/Integrator-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class for numerical integration — Integrator-class","text":"pointer external pointer C++ object.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/catch_what.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw exception and catch error message — catch_what","title":"Throw exception and catch error message — catch_what","text":"Throw exception catch error message","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/catch_what.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw exception and catch error message — catch_what","text":"","code":"catch_what(exception, message)"},{"path":"https://hsloot.github.io/integratecpp/reference/catch_what.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw exception and catch error message — catch_what","text":"exception name exception thrown. message error message passed exception constructor.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"A method for numerical integration — integrate","title":"A method for numerical integration — integrate","text":"Adaptive quadrature functions one variable finite   infinite interval.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A method for numerical integration — integrate","text":"","code":"integrate(   f,   lower,   upper,   ...,   max_subdivisions = 100L,   relative_accuracy = .Machine$double.eps^0.25,   absolute_accuracy = relative_accuracy,   work_size = 4 * max_subdivisions,   stop.on.error = TRUE )"},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A method for numerical integration — integrate","text":"Based QUADPACK routines dqags dqagi   R. Piessens E. deDoncker--Kapenga, available Netlib.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A method for numerical integration — integrate","text":"f R function taking numeric first argument returning     numeric vector length.  Returning non-finite element     generate error. lower, upper limits integration.  Can infinite. ... additional arguments passed f. max_subdivisions maximum number subintervals. relative_accuracy relative accuracy requested. absolute_accuracy absolute accuracy requested. stop..error logical. true (default) error stops     function.  false errors give result warning     message component.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A method for numerical integration — integrate","text":"list class \"integrate\" components value final estimate integral. abs.error estimate modulus absolute error. subdivisions number subintervals produced     subdivision process. message \"OK\" character string giving error message. call matched call.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A method for numerical integration — integrate","text":"Note arguments ... must matched exactly. one limits infinite, infinite range mapped onto   finite interval. finite interval, globally adaptive interval subdivision used   connection extrapolation Wynn's Epsilon algorithm,   basic step Gauss--Kronrod quadrature. rel.tol less max(50*.Machine$double.eps,     0.5e-28) abs.tol <= 0. Note comments C source code   <R>/src/appl/integrate.c give details, particularly   reasons failure (internal error code ier >= 1). R versions \\(\\le\\) 3.2.x, first entries   lower upper used whereas error signalled   now length one.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A method for numerical integration — integrate","text":"Like numerical integration routines, evaluate function   finite set points.  function approximately constant   (particular, zero) nearly range possible   result error estimate may seriously wrong. integrating infinite intervals explicitly, rather   just using large number endpoint.  increases chance   correct answer -- function whose integral infinite   interval finite must near zero interval. values finite set points fair reflection   behaviour function elsewhere, function needs   well-behaved, example differentiable except perhaps small   number jumps integrable singularities. f must accept vector inputs produce vector function   evaluations points.  Vectorize function   may helpful convert f form.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A method for numerical integration — integrate","text":"R. Piessens, E. deDoncker--Kapenga, C. Uberhuber, D. Kahaner (1983)   Quadpack: Subroutine Package Automatic Integration;   Springer Verlag.","code":""},{"path":"https://hsloot.github.io/integratecpp/reference/integrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A method for numerical integration — integrate","text":"","code":"integrate(dnorm, -1.96, 1.96) #> 0.9500042 with absolute error < 1e-11 integrate(dnorm, -Inf, Inf) #> 1 with absolute error < 9.4e-05  ## a slowly-convergent integral integrand <- function(x) {1/((x+1)*sqrt(x))} integrate(integrand, lower = 0, upper = Inf) #> 3.141593 with absolute error < 2.7e-05  ## don't do this if you really want the integral from 0 to Inf integrate(integrand, lower = 0, upper = 10) #> 2.529038 with absolute error < 3e-04 integrate(integrand, lower = 0, upper = 100000) #> 3.135268 with absolute error < 4.2e-07 integrate(integrand, lower = 0, upper = 1000000, stop.on.error = FALSE) #> failed with message ‘the integral is probably divergent’  ## some functions do not handle vector input properly f <- function(x) 2.0 try(integrate(f, 0, 1)) #> Error in integrate(f, 0, 1) :  #>   evaluation of function gave a result of wrong length integrate(Vectorize(f), 0, 1)  ## correct #> 2 with absolute error < 2.2e-14 integrate(function(x) rep(2.0, length(x)), 0, 1)  ## correct #> 2 with absolute error < 2.2e-14  ## integrate can fail if misused integrate(dnorm, 0, 2) #> 0.4772499 with absolute error < 5.3e-15 integrate(dnorm, 0, 20) #> 0.5 with absolute error < 3.7e-05 integrate(dnorm, 0, 200) #> 0.5 with absolute error < 1.6e-07 integrate(dnorm, 0, 2000) #> 0.5 with absolute error < 4.4e-06 integrate(dnorm, 0, 20000) ## fails on many systems #> 0 with absolute error < 0 integrate(dnorm, 0, Inf)   ## works #> 0.5 with absolute error < 4.7e-05 tools::assertError( integrate(dnorm, 0:1, 20) #-> error! ## \"silently\" gave  integrate(dnorm, 0, 20)  in earlier versions of R  , verbose=TRUE) #> Asserted error: length(lower) == 1 is not TRUE"},{"path":"https://hsloot.github.io/integratecpp/reference/integratecpp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"integratecpp — integratecpp-package","title":"integratecpp — integratecpp-package","text":"package contains header-API numerical integration methods Rdqagi Rdqags <R_Ext/Applic.h.","code":""},{"path":[]},{"path":"https://hsloot.github.io/integratecpp/reference/integratecpp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"integratecpp — integratecpp-package","text":"Maintainer: Henrik Sloot henrik.sloot@gmail.com (ORCID)","code":""},{"path":"https://hsloot.github.io/integratecpp/news/index.html","id":"integratecpp-010","dir":"Changelog","previous_headings":"","what":"integratecpp 0.1.0","title":"integratecpp 0.1.0","text":"Add header-C++ interface R’s numerical integration methods Rdqags Rdqagi","code":""}]
