// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/integratecpp.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Rcpp__integration_logic_error__catch_what
std::string Rcpp__integration_logic_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__integration_logic_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integration_logic_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integration_runtime_error__catch_what
std::string Rcpp__integration_runtime_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__integration_runtime_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integration_runtime_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__max_subdivision_error__catch_what
std::string Rcpp__max_subdivision_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__max_subdivision_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__max_subdivision_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__roundoff_error__catch_what
std::string Rcpp__roundoff_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__roundoff_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__roundoff_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__bad_integrand_error__catch_what
std::string Rcpp__bad_integrand_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__bad_integrand_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__bad_integrand_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__extrapolation_roundoff_error__catch_what
std::string Rcpp__extrapolation_roundoff_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__extrapolation_roundoff_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__extrapolation_roundoff_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__divergence_error__catch_what
std::string Rcpp__divergence_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__divergence_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__divergence_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__invalid_input_error__catch_what
std::string Rcpp__invalid_input_error__catch_what(std::string what);
RcppExport SEXP _integratecpp_Rcpp__invalid_input_error__catch_what(SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__invalid_input_error__catch_what(what));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrate
Rcpp::List Rcpp__integrate(Rcpp::Function fn, const double lower, const double upper, const int max_subdivisions, const double relative_accuracy, const double absolute_accuracy, const int work_size);
RcppExport SEXP _integratecpp_Rcpp__integrate(SEXP fnSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP max_subdivisionsSEXP, SEXP relative_accuracySEXP, SEXP absolute_accuracySEXP, SEXP work_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const int >::type max_subdivisions(max_subdivisionsSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_accuracy(relative_accuracySEXP);
    Rcpp::traits::input_parameter< const double >::type absolute_accuracy(absolute_accuracySEXP);
    Rcpp::traits::input_parameter< const int >::type work_size(work_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrate(fn, lower, upper, max_subdivisions, relative_accuracy, absolute_accuracy, work_size));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrator__new
Rcpp::XPtr<integratecpp::integrator> Rcpp__integrator__new(const int max_subdivisions, const double relative_accuracy, const double absolute_accuracy, const int work_size);
RcppExport SEXP _integratecpp_Rcpp__integrator__new(SEXP max_subdivisionsSEXP, SEXP relative_accuracySEXP, SEXP absolute_accuracySEXP, SEXP work_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type max_subdivisions(max_subdivisionsSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_accuracy(relative_accuracySEXP);
    Rcpp::traits::input_parameter< const double >::type absolute_accuracy(absolute_accuracySEXP);
    Rcpp::traits::input_parameter< const int >::type work_size(work_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrator__new(max_subdivisions, relative_accuracy, absolute_accuracy, work_size));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrator__get_max_subdivisions
int Rcpp__integrator__get_max_subdivisions(Rcpp::XPtr<integratecpp::integrator> ptr);
RcppExport SEXP _integratecpp_Rcpp__integrator__get_max_subdivisions(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrator__get_max_subdivisions(ptr));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrator__set_max_subdivisions
void Rcpp__integrator__set_max_subdivisions(Rcpp::XPtr<integratecpp::integrator> ptr, const int max_subdivisions);
RcppExport SEXP _integratecpp_Rcpp__integrator__set_max_subdivisions(SEXP ptrSEXP, SEXP max_subdivisionsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const int >::type max_subdivisions(max_subdivisionsSEXP);
    Rcpp__integrator__set_max_subdivisions(ptr, max_subdivisions);
    return R_NilValue;
END_RCPP
}
// Rcpp__integrator__get_relative_accuracy
double Rcpp__integrator__get_relative_accuracy(Rcpp::XPtr<integratecpp::integrator> ptr);
RcppExport SEXP _integratecpp_Rcpp__integrator__get_relative_accuracy(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrator__get_relative_accuracy(ptr));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrator__set_relative_accuracy
void Rcpp__integrator__set_relative_accuracy(Rcpp::XPtr<integratecpp::integrator> ptr, const double relative_accuracy);
RcppExport SEXP _integratecpp_Rcpp__integrator__set_relative_accuracy(SEXP ptrSEXP, SEXP relative_accuracySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_accuracy(relative_accuracySEXP);
    Rcpp__integrator__set_relative_accuracy(ptr, relative_accuracy);
    return R_NilValue;
END_RCPP
}
// Rcpp__integrator__get_absolute_accuracy
double Rcpp__integrator__get_absolute_accuracy(Rcpp::XPtr<integratecpp::integrator> ptr);
RcppExport SEXP _integratecpp_Rcpp__integrator__get_absolute_accuracy(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrator__get_absolute_accuracy(ptr));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrator__set_absolute_accuracy
void Rcpp__integrator__set_absolute_accuracy(Rcpp::XPtr<integratecpp::integrator> ptr, const double absolute_accuracy);
RcppExport SEXP _integratecpp_Rcpp__integrator__set_absolute_accuracy(SEXP ptrSEXP, SEXP absolute_accuracySEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const double >::type absolute_accuracy(absolute_accuracySEXP);
    Rcpp__integrator__set_absolute_accuracy(ptr, absolute_accuracy);
    return R_NilValue;
END_RCPP
}
// Rcpp__integrator__get_work_size
int Rcpp__integrator__get_work_size(Rcpp::XPtr<integratecpp::integrator> ptr);
RcppExport SEXP _integratecpp_Rcpp__integrator__get_work_size(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrator__get_work_size(ptr));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrator__set_work_size
void Rcpp__integrator__set_work_size(Rcpp::XPtr<integratecpp::integrator> ptr, const int work_size);
RcppExport SEXP _integratecpp_Rcpp__integrator__set_work_size(SEXP ptrSEXP, SEXP work_sizeSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const int >::type work_size(work_sizeSEXP);
    Rcpp__integrator__set_work_size(ptr, work_size);
    return R_NilValue;
END_RCPP
}
// Rcpp__integrator__is_valid
bool Rcpp__integrator__is_valid(Rcpp::XPtr<integratecpp::integrator> ptr);
RcppExport SEXP _integratecpp_Rcpp__integrator__is_valid(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrator__is_valid(ptr));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__integrator__throw_if_invalid
void Rcpp__integrator__throw_if_invalid(Rcpp::XPtr<integratecpp::integrator> ptr);
RcppExport SEXP _integratecpp_Rcpp__integrator__throw_if_invalid(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    Rcpp__integrator__throw_if_invalid(ptr);
    return R_NilValue;
END_RCPP
}
// Rcpp__integrator__integrate
Rcpp::List Rcpp__integrator__integrate(Rcpp::XPtr<integratecpp::integrator> ptr, Rcpp::Function fn, const double lower, const double upper);
RcppExport SEXP _integratecpp_Rcpp__integrator__integrate(SEXP ptrSEXP, SEXP fnSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<integratecpp::integrator> >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__integrator__integrate(ptr, fn, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_integratecpp_Rcpp__integration_logic_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__integration_logic_error__catch_what, 1},
    {"_integratecpp_Rcpp__integration_runtime_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__integration_runtime_error__catch_what, 1},
    {"_integratecpp_Rcpp__max_subdivision_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__max_subdivision_error__catch_what, 1},
    {"_integratecpp_Rcpp__roundoff_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__roundoff_error__catch_what, 1},
    {"_integratecpp_Rcpp__bad_integrand_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__bad_integrand_error__catch_what, 1},
    {"_integratecpp_Rcpp__extrapolation_roundoff_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__extrapolation_roundoff_error__catch_what, 1},
    {"_integratecpp_Rcpp__divergence_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__divergence_error__catch_what, 1},
    {"_integratecpp_Rcpp__invalid_input_error__catch_what", (DL_FUNC) &_integratecpp_Rcpp__invalid_input_error__catch_what, 1},
    {"_integratecpp_Rcpp__integrate", (DL_FUNC) &_integratecpp_Rcpp__integrate, 7},
    {"_integratecpp_Rcpp__integrator__new", (DL_FUNC) &_integratecpp_Rcpp__integrator__new, 4},
    {"_integratecpp_Rcpp__integrator__get_max_subdivisions", (DL_FUNC) &_integratecpp_Rcpp__integrator__get_max_subdivisions, 1},
    {"_integratecpp_Rcpp__integrator__set_max_subdivisions", (DL_FUNC) &_integratecpp_Rcpp__integrator__set_max_subdivisions, 2},
    {"_integratecpp_Rcpp__integrator__get_relative_accuracy", (DL_FUNC) &_integratecpp_Rcpp__integrator__get_relative_accuracy, 1},
    {"_integratecpp_Rcpp__integrator__set_relative_accuracy", (DL_FUNC) &_integratecpp_Rcpp__integrator__set_relative_accuracy, 2},
    {"_integratecpp_Rcpp__integrator__get_absolute_accuracy", (DL_FUNC) &_integratecpp_Rcpp__integrator__get_absolute_accuracy, 1},
    {"_integratecpp_Rcpp__integrator__set_absolute_accuracy", (DL_FUNC) &_integratecpp_Rcpp__integrator__set_absolute_accuracy, 2},
    {"_integratecpp_Rcpp__integrator__get_work_size", (DL_FUNC) &_integratecpp_Rcpp__integrator__get_work_size, 1},
    {"_integratecpp_Rcpp__integrator__set_work_size", (DL_FUNC) &_integratecpp_Rcpp__integrator__set_work_size, 2},
    {"_integratecpp_Rcpp__integrator__is_valid", (DL_FUNC) &_integratecpp_Rcpp__integrator__is_valid, 1},
    {"_integratecpp_Rcpp__integrator__throw_if_invalid", (DL_FUNC) &_integratecpp_Rcpp__integrator__throw_if_invalid, 1},
    {"_integratecpp_Rcpp__integrator__integrate", (DL_FUNC) &_integratecpp_Rcpp__integrator__integrate, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_integratecpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
